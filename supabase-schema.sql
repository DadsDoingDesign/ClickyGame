-- Create the leaderboard table
CREATE TABLE IF NOT EXISTS public.leaderboard (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  score BIGINT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add a trigger to automatically update the updated_at column
CREATE TRIGGER update_leaderboard_updated_at
BEFORE UPDATE ON public.leaderboard
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Create an index on the score column for faster sorting
CREATE INDEX IF NOT EXISTS leaderboard_score_idx ON public.leaderboard (score DESC);

-- Set up Row Level Security (RLS)
-- Enable RLS on the leaderboard table
ALTER TABLE public.leaderboard ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows anyone to read the leaderboard
CREATE POLICY "Allow public read access" ON public.leaderboard
  FOR SELECT USING (true);

-- Create a policy that allows anyone to insert into the leaderboard
CREATE POLICY "Allow public insert access" ON public.leaderboard
  FOR INSERT WITH CHECK (true);

-- Create a policy that allows users to update only their own scores
CREATE POLICY "Allow update of own scores" ON public.leaderboard
  FOR UPDATE USING (true) WITH CHECK (true);

-- Create a function to get the current timestamp (for testing connection)
CREATE OR REPLACE FUNCTION get_timestamp()
RETURNS TIMESTAMP WITH TIME ZONE AS $$
BEGIN
  RETURN NOW();
END;
$$ LANGUAGE plpgsql;
